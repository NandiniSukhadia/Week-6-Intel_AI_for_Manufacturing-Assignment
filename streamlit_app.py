# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PKlkpvMrZYNHI-0pfC77mlsL8T4CDlVL
"""

!pip install streamlit
!pip install plotly
!pip install joblib
!pip install pandas

# streamlit_app_csv_advanced.py
import streamlit as st
import joblib
import pandas as pd
import time
import plotly.express as px

import pandas as pd
import random

# Sample data generation for timelytics_input_data.csv
categories = ['Electronics', 'Clothing', 'Furniture', 'Toys', 'Books']
locations = ['New York', 'California', 'Texas', 'Florida', 'Washington']
shipping_methods = ['Standard', 'Expedited', 'Overnight']

# Random data generation
data = {
    'product_category': [random.choice(categories) for _ in range(1000)],
    'customer_location': [random.choice(locations) for _ in range(1000)],
    'shipping_method': [random.choice(shipping_methods) for _ in range(1000)],
    'delivery_time': [random.randint(1, 14) for _ in range(1000)]  # Random delivery times between 1-14 days
}

# Create DataFrame and save to CSV
df = pd.DataFrame(data)
df.to_csv('timelytics_input_data.csv', index=False)
print("Sample data saved as 'timelytics_input_data.csv'")

# train_model.py
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib

# Step 1: Load the data
df = pd.read_csv('timelytics_input_data.csv')  # Using the CSV file we generated

# Step 2: Define features and target
X = df[['product_category', 'customer_location', 'shipping_method']]
y = df['delivery_time']  # Target column

# Step 3: Preprocessing - One-hot encoding for categorical features
categorical_features = ['product_category', 'customer_location', 'shipping_method']
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Step 4: Create a pipeline with preprocessing and regressor
preprocessor = ColumnTransformer(
    transformers=[('cat', categorical_transformer, categorical_features)]
)

# Model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Step 5: Train the model
model.fit(X, y)

# Step 6: Save the model as .pkl file
joblib.dump(model, 'delivery_time_model.pkl')
print("âœ… Model saved as 'delivery_time_model.pkl'")

import streamlit as st
import joblib
import pandas as pd

# Load the trained model
model = joblib.load('delivery_time_model.pkl')

# Create the Streamlit interface for prediction
st.title("Delivery Time Prediction")

product_category = st.selectbox("Product Category", ['Electronics', 'Clothing', 'Furniture', 'Toys', 'Books'])
customer_location = st.selectbox("Customer Location", ['New York', 'California', 'Texas', 'Florida', 'Washington'])
shipping_method = st.selectbox("Shipping Method", ['Standard', 'Expedited', 'Overnight'])

# Predict button
if st.button("Predict Delivery Time"):
    input_data = pd.DataFrame({
        'product_category': [product_category],
        'customer_location': [customer_location],
        'shipping_method': [shipping_method]
    })
    delivery_time = model.predict(input_data)[0]
    st.write(f"Predicted Delivery Time: {delivery_time} days")

import pandas as pd
import random

# Sample data generation for timelytics_input_data.csv
categories = ['Electronics', 'Clothing', 'Furniture', 'Toys', 'Books']
locations = ['New York', 'California', 'Texas', 'Florida', 'Washington']
shipping_methods = ['Standard', 'Expedited', 'Overnight']

# Random data generation
data = {
    'product_category': [random.choice(categories) for _ in range(1000)],
    'customer_location': [random.choice(locations) for _ in range(1000)],
    'shipping_method': [random.choice(shipping_methods) for _ in range(1000)],
    'delivery_time': [random.randint(1, 14) for _ in range(1000)]  # Random delivery times between 1-14 days
}

# Create DataFrame and save to CSV
df = pd.DataFrame(data)
df.to_csv('timelytics_input_data.csv', index=False)
print("Sample data saved as 'timelytics_input_data.csv'")

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib

# Step 1: Load the data
df = pd.read_csv('timelytics_input_data.csv')  # Using the CSV file we generated

# Step 2: Define features and target
X = df[['product_category', 'customer_location', 'shipping_method']]
y = df['delivery_time']  # Target column

# Step 3: Preprocessing - One-hot encoding for categorical features
categorical_features = ['product_category', 'customer_location', 'shipping_method']
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Step 4: Create a pipeline with preprocessing and regressor
preprocessor = ColumnTransformer(
    transformers=[('cat', categorical_transformer, categorical_features)]
)

# Model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Step 5: Train the model
model.fit(X, y)

# Step 6: Save the model as .pkl file
joblib.dump(model, 'delivery_time_model.pkl')
print("âœ… Model saved as 'delivery_time_model.pkl'")

pip install --upgrade streamlit

import streamlit as st
import joblib
import pandas as pd

# Load the trained model
model = joblib.load('delivery_time_model.pkl')

# Create the Streamlit interface for prediction
st.title("Delivery Time Prediction")

product_category = st.selectbox("Product Category", ['Electronics', 'Clothing', 'Furniture', 'Toys', 'Books'])
customer_location = st.selectbox("Customer Location", ['New York', 'California', 'Texas', 'Florida', 'Washington'])
shipping_method = st.selectbox("Shipping Method", ['Standard', 'Expedited', 'Overnight'])

# Predict button
if st.button("Predict Delivery Time"):
    input_data = pd.DataFrame({
        'product_category': [product_category],
        'customer_location': [customer_location],
        'shipping_method': [shipping_method]
    })
    delivery_time = model.predict(input_data)[0]
    st.write(f"Predicted Delivery Time: {delivery_time} days")

import streamlit as st
import joblib
import pandas as pd
import plotly.express as px
from io import StringIO

# Interactive Plotly Charts
st.subheader("Delivery Time Analysis")

# Delivery Time Histogram
fig_histogram = px.histogram(df, x='delivery_time', nbins=20, title="Delivery Time Histogram")
st.plotly_chart(fig_histogram)

# Average Delivery Time by Product Category
avg_by_category = df.groupby('product_category')['delivery_time'].mean().reset_index()
fig_category = px.bar(avg_by_category, x='product_category', y='delivery_time',
                      title="Average Delivery Time by Product Category",
                      labels={'product_category': 'Product Category', 'delivery_time': 'Average Delivery Time (days)'})
st.plotly_chart(fig_category)

# Average Delivery Time by Shipping Method
avg_by_shipping = df.groupby('shipping_method')['delivery_time'].mean().reset_index()
fig_shipping = px.bar(avg_by_shipping, x='shipping_method', y='delivery_time',
                      title="Average Delivery Time by Shipping Method",
                      labels={'shipping_method': 'Shipping Method', 'delivery_time': 'Average Delivery Time (days)'})
st.plotly_chart(fig_shipping)

# ðŸ’¾ Download Filtered Data as CSV
st.subheader("Download Filtered Data")

# Create a filtered DataFrame based on user selection
filtered_df = df[(df['product_category'] == product_category) &
                 (df['customer_location'] == customer_location) &
                 (df['shipping_method'] == shipping_method)]

# Convert filtered DataFrame to CSV
csv_data = filtered_df.to_csv(index=False)

# Provide download button
st.download_button(
    label="Download Filtered Data as CSV",
    data=csv_data,
    file_name='filtered_data.csv',
    mime='text/csv'
)

import streamlit as st
import joblib
import pandas as pd
import plotly.express as px
import warnings
from io import StringIO

# Ignore specific warnings for this app
warnings.filterwarnings('ignore', message="missing ScriptRunContext! This warning can be ignored when running in bare mode")

# Load the trained model (ensure you have the correct path to the .pkl file)
model = joblib.load('delivery_time_model.pkl')

# Load the dataset for analysis (ensure path is correct)
df = pd.read_csv('timelytics_input_data.csv')

# Streamlit UI
st.title("Order Delivery Time Prediction and Analysis")

# Display a warning message on the app (if warning is not suppressed)
st.warning("Note: This app may show a warning 'missing ScriptRunContext!' during execution. It can be ignored.")

# User input for prediction
product_category = st.selectbox("Product Category", ['Electronics', 'Clothing', 'Furniture', 'Toys', 'Books'])
customer_location = st.selectbox("Customer Location", ['New York', 'California', 'Texas', 'Florida', 'Washington'])
shipping_method = st.selectbox("Shipping Method", ['Standard', 'Expedited', 'Overnight'])

# Button to trigger prediction
if st.button("Predict Delivery Time"):
    input_data = pd.DataFrame({
        'product_category': [product_category],
        'customer_location': [customer_location],
        'shipping_method': [shipping_method]
    })
    # Prediction
    delivery_time = model.predict(input_data)[0]
    st.write(f"Predicted Delivery Time: {delivery_time} days")

# Interactive Plotly charts for visualization
st.subheader("Delivery Time Analysis")

# Delivery Time Histogram
fig_histogram = px.histogram(df, x='delivery_time', nbins=20, title="Delivery Time Histogram")
st.plotly_chart(fig_histogram)

# Average Delivery Time by Product Category
avg_by_category = df.groupby('product_category')['delivery_time'].mean().reset_index()
fig_category = px.bar(avg_by_category, x='product_category', y='delivery_time',
                      title="Average Delivery Time by Product Category",
                      labels={'product_category': 'Product Category', 'delivery_time': 'Average Delivery Time (days)'})
st.plotly_chart(fig_category)

# Average Delivery Time by Shipping Method
avg_by_shipping = df.groupby('shipping_method')['delivery_time'].mean().reset_index()
fig_shipping = px.bar(avg_by_shipping, x='shipping_method', y='delivery_time',
                      title="Average Delivery Time by Shipping Method",
                      labels={'shipping_method': 'Shipping Method', 'delivery_time': 'Average Delivery Time (days)'})
st.plotly_chart(fig_shipping)

# Download Filtered Data as CSV
st.subheader("Download Filtered Data")

# Filtered Data based on User Input
filtered_df = df[(df['product_category'] == product_category) &
                 (df['customer_location'] == customer_location) &
                 (df['shipping_method'] == shipping_method)]

# Convert filtered data to CSV format
csv_data = filtered_df.to_csv(index=False)

# Provide a download button
st.download_button(
    label="Download Filtered Data as CSV",
    data=csv_data,
    file_name='filtered_data.csv',
    mime='text/csv'
)

